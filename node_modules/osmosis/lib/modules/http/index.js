'use strict';

var URL = require('url');

var urlType = function (obj) {
  if (obj instanceof URL) {
    return obj;
  }

  if (typeof obj !== 'string') {
    return false;
  }

  if (obj.indexOf('http') !== 0) {
    return false;
  }

  return new URL(obj);
}

var selectorType = function (obj) {
  if (typeof obj !== 'string') {
    return false;
  }

  return obj;
}

module.exports = function (osmosis) {
  // http.prototype.config = 
  // http.prototype.listeners =

  this.types = {
    url: {
      match: function (arg, index) {
        return arg instanceof URL;
      },
      from: {
        string: function (arg, index) {
          return arg.indexOf('http') === 0;
        },
        instance: function (  arg, index) {
          return arg(this.then(function (context, data) {
            if (context.href) {
              next(context.href);
            }
          }));
        }
      }
    }
    'selector': 
  }

  this.extend('get', {
    args: [
      {
        required: true,
        handler: function (arg, index) {
          if (!args[0]) {
            return (context, data) => {
              if (context.href) {
                return context.href;
              }

              if (typeof data === 'string') {
                return data;
              }
            }
          }

          next(function (url) {

          }, url);
          return args[0];
        }
      },
      {
        handler: function (args) {
          next(function (callback) {
            needle.get()
          }, params);
        }
      }
    ],
    handler: function (args) {
      return this.then(function (context, data) {
        return function (next, done) {

        }
      });
    }
  });

  this.extend('location', {
    args: [
      {
        handler: function () {}
      },
      handler: function (url) {

      }
    ]
  });

  this.parent.extend('get', this.get);

  osmosis.get(osmos)

  // new osmosis.get() should work
}